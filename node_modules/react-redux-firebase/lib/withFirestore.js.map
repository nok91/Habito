{"version":3,"sources":["../src/withFirestore.js"],"names":["createWithFirestore","WrappedComponent","WithFirestore","props","Component","HoistedComp","withFirestore","firebase","firestore","dispatch","displayName","wrappedComponent"],"mappings":"wnGA0BO,GAAMA,CAAAA,mBAAmB,CAAG,kEAAY,OAAZ,OAAwB,UAAAC,gBAAgB,CAAI,IACvEC,CAAAA,aADuE,4RAIlE,CACP,MAAO,8BAAC,gBAAD,CAAsB,KAAKC,KAA3B,CACR,CAN0E,mBACjDC,gBADiD,kBACvEF,aADuE,oBAEjDD,gBAFiD,KASvEI,CAAAA,WAAW,CAAG,kCAAaH,aAAb,CAA4BD,gBAA5B,CATyD,CAWvEK,aAAa,CAAG,SAAAH,KAAK,QACzB,8BAAC,kCAAD,CAA2B,QAA3B,MACG,SAAAI,QAAQ,QACP,8BAAC,8BAAD,CAAuB,QAAvB,MACG,SAAAC,SAAS,QACR,8BAAC,WAAD,WACE,SAAS,CAAEA,SADb,CAEE,QAAQ,CAAED,QAFZ,CAGE,QAAQ,CAAEA,QAAQ,CAACE,QAHrB,EAIMN,KAJN,EADQ,CADZ,CADO,CADX,CADyB,CAXkD,CA+B7E,MAHAG,CAAAA,aAAa,CAACI,WAAd,CAA4B,2BAAgBT,gBAAhB,CAAkC,eAAlC,CAG5B,CAFAK,aAAa,CAACK,gBAAd,CAAiCV,gBAEjC,CAAOK,aACR,CAhCkC,CAA5B,C,6DAuFQN,mBAAmB,E","sourcesContent":["import React, { Component } from 'react'\nimport hoistStatics from 'hoist-non-react-statics'\nimport { wrapDisplayName } from './utils'\nimport ReactReduxFirebaseContext from './ReactReduxFirebaseContext'\nimport ReduxFirestoreContext from './ReduxFirestoreContext'\n\n/**\n * @name createWithFirestore\n * @description Function that creates a Higher Order Component that\n * which provides `firebase`, `firestore`, and `dispatch` to React Components.\n *\n * **WARNING!!** This is an advanced feature, and should only be used when\n * needing to access a firebase instance created under a different store key.\n * @param {String} [storeKey='store'] - Name of redux store which contains\n * Firestore state (`state.firestore`)\n * @return {Function} - Higher Order Component which accepts an array of\n * watchers config and wraps a React Component\n * @example <caption>Basic</caption>\n * import { createWithFirestore } from 'react-redux-firebase'\n *\n * // create withFirestore that uses another redux store\n * const withFirestore = createWithFirestore('anotherStore')\n *\n * // use the withFirestore to wrap a component\n * export default withFirestore(SomeComponent)\n */\nexport const createWithFirestore = (storeKey = 'store') => WrappedComponent => {\n  class WithFirestore extends Component {\n    static wrappedComponent = WrappedComponent\n\n    render() {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n\n  const HoistedComp = hoistStatics(WithFirestore, WrappedComponent)\n\n  const withFirestore = props => (\n    <ReactReduxFirebaseContext.Consumer>\n      {firebase => (\n        <ReduxFirestoreContext.Consumer>\n          {firestore => (\n            <HoistedComp\n              firestore={firestore}\n              firebase={firebase}\n              dispatch={firebase.dispatch}\n              {...props}\n            />\n          )}\n        </ReduxFirestoreContext.Consumer>\n      )}\n    </ReactReduxFirebaseContext.Consumer>\n  )\n\n  withFirestore.displayName = wrapDisplayName(WrappedComponent, 'withFirestore')\n  withFirestore.wrappedComponent = WrappedComponent\n\n  return withFirestore\n}\n\n/**\n * @name withFirestore\n * @extends React.Component\n * @description Higher Order Component that attaches `firestore`, `firebase`\n * and `dispatch` as props to React Components. Firebase instance is gathered\n * from `store.firestore`, which is attached to store by the store enhancer\n * (`reduxFirestore`) during setup of\n * [`redux-firestore`](https://github.com/prescottprue/redux-firestore)\n * @return {Function} - Which accepts a component to wrap and returns the\n * wrapped component\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { withFirestore } from 'react-redux-firebase'\n *\n * function AddData({ firebase: { add } }) {\n *   return (\n *     <div>\n *       <button onClick={() => add('todos', { done: false, text: 'Sample' })}>\n *         Add Sample Todo\n *       </button>\n *     </div>\n *   )\n * }\n *\n * export default withFirestore(AddTodo)\n * @example <caption>Within HOC Composition</caption>\n * import React from 'react'\n * import { compose } from 'redux' // can also come from recompose\n * import { withHandlers } from 'recompose'\n * import { withFirestore } from 'react-redux-firebase'\n *\n * function AddTodo({ addTodo }) {\n *   return (\n *     <div>\n *       <button onClick={addTodo}>\n *         Add Sample Todo\n *       </button>\n *     </div>\n *   )\n * }\n *\n * const enhance = compose(\n *   withFirestore,\n *   withHandlers({\n *     addTodo: props => () => {\n *       const newTodo = { done: false, text: 'Sample' }\n *       return props.firestore.add({ collection: 'todos' }, newTodo)\n *     }\n *   })\n * )\n *\n * export default enhance(AddTodo)\n */\nexport default createWithFirestore()\n"],"file":"withFirestore.js"}