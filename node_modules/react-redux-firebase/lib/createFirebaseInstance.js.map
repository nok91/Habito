{"version":3,"sources":["../src/createFirebaseInstance.js"],"names":["createFirebaseInstance","firebase","configs","dispatch","enableLogging","database","_","watchers","listeners","callbacks","queries","config","authUid","withMeta","method","path","value","onComplete","prefix","dataWithMeta","ServerValue","TIMESTAMP","auth","currentUser","uid","ref","actionCreators","signInWithPhoneNumber","authActions","initializeAuth","init","Object","assign","set","setWithMeta","uniqueSet","transaction","d","then","committed","snapshot","newError","Error","Promise","reject","push","pushWithMeta","remove","options","queryActions","update","updateWithMeta","login","credentials","handleRedirectResult","authData","logout","updateAuth","authUpdate","updateInProfile","updateEmail","newEmail","updateProfile","profileUpdate","uploadFile","file","dbPath","storageActions","uploadFiles","files","deleteFile","createUser","profile","resetPassword","confirmPasswordReset","code","password","verifyPasswordResetCode","watchEvent","type","storeAs","unWatchEvent","queryId","reloadAuth","linkWithCredential","credential","promiseEvents","watchArray","inputAsFunc","prevData","queryConfigs","all","map","queryConfig"],"mappings":"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","sourcesContent":["import { isObject } from 'lodash'\nimport { merge } from 'lodash/fp'\nimport { getEventsFromInput, createCallable } from './utils'\nimport { mapWithFirebaseAndDispatch } from './utils/actions'\nimport { authActions, queryActions, storageActions } from './actions'\n\n/**\n * Create a firebase instance that has helpers attached for dispatching actions\n * @param  {Object} firebase - Firebase instance which to extend\n * @param  {Object} configs - Configuration object\n * @param  {Function} dispatch - Action dispatch function\n * @return {Object} Extended Firebase instance\n * @private\n */\nexport default function createFirebaseInstance(firebase, configs, dispatch) {\n  /* istanbul ignore next: Logging is external */\n  // Enable Logging based on config (handling instances without i.e RNFirebase)\n  if (\n    configs.enableLogging &&\n    firebase.database &&\n    typeof firebase.database.enableLogging === 'function'\n  ) {\n    firebase.database.enableLogging(configs.enableLogging)\n  }\n\n  // Add internal variables to firebase instance\n  const defaultInternals = {\n    watchers: {},\n    listeners: {},\n    callbacks: {},\n    queries: {},\n    config: configs,\n    authUid: null\n  }\n\n  firebase._ = merge(defaultInternals, firebase._) // eslint-disable-line no-param-reassign\n\n  /**\n   * @private\n   * @description Calls a method and attaches meta to value object\n   * @param {String} method - Method to run with meta attached\n   * @param {String} path - Path to location on Firebase which to set\n   * @param {Object|String|Boolean|Number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete\n   * @return {Promise} Containing reference snapshot\n   */\n  const withMeta = (method, path, value, onComplete) => {\n    if (isObject(value)) {\n      const prefix = method === 'update' ? 'updated' : 'created'\n      const dataWithMeta = {\n        ...value,\n        [`${prefix}At`]: firebase.database.ServerValue.TIMESTAMP\n      }\n      if (firebase.auth().currentUser) {\n        dataWithMeta[`${prefix}By`] = firebase.auth().currentUser.uid\n      }\n      return firebase\n        .database()\n        .ref(path)\n        [method](dataWithMeta, onComplete)\n    }\n    return firebase\n      .database()\n      .ref(path)\n      [method](value, onComplete)\n  }\n\n  /**\n   * @description Sets data to Firebase.\n   * @param {String} path - Path to location on Firebase which to set\n   * @param {Object|String|Boolean|Number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @return {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   * const Example = ({ firebase: { set } }) => (\n   *   <button onClick={() => set('some/path', { here: 'is a value' })}>\n   *     Set To Firebase\n   *   </button>\n   * )\n   * export default firebaseConnect()(Example)\n   */\n  const set = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .set(value, onComplete)\n\n  /**\n   * @description Sets data to Firebase along with meta data. Currently,\n   * this includes createdAt and createdBy. *Warning* using this function\n   * may have unintented consequences (setting createdAt even if data already\n   * exists)\n   * @param {String} path - Path to location on Firebase which to set\n   * @param {Object|String|Boolean|Number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @return {Promise} Containing reference snapshot\n   */\n  const setWithMeta = (path, value, onComplete) =>\n    withMeta('set', path, value, onComplete)\n\n  /**\n   * @description Pushes data to Firebase.\n   * @param {String} path - Path to location on Firebase which to push\n   * @param {Object|String|Boolean|Number} value - Value to push to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @return {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   * const Example = ({ firebase: { push } }) => (\n   *   <button onClick={() => push('some/path', true)}>\n   *     Push To Firebase\n   *   </button>\n   * )\n   * export default firebaseConnect()(Example)\n   */\n  const push = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .push(value, onComplete)\n\n  /**\n   * @description Pushes data to Firebase along with meta data. Currently,\n   * this includes createdAt and createdBy.\n   * @param {String} path - Path to location on Firebase which to set\n   * @param {Object|String|Boolean|Number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @return {Promise} Containing reference snapshot\n   */\n  const pushWithMeta = (path, value, onComplete) =>\n    withMeta('push', path, value, onComplete)\n\n  /**\n   * @description Updates data on Firebase and sends new data.\n   * @param {String} path - Path to location on Firebase which to update\n   * @param {Object|String|Boolean|Number} value - Value to update to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @return {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   * const Example = ({ firebase: { update } }) => (\n   *   <button onClick={() => update('some/path', { here: 'is a value' })}>\n   *     Update To Firebase\n   *   </button>\n   * )\n   * export default firebaseConnect()(Example)\n   */\n  const update = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .update(value, onComplete)\n\n  /**\n   * @description Updates data on Firebase along with meta. *Warning*\n   * using this function may have unintented consequences (setting\n   * createdAt even if data already exists)\n   * @param {String} path - Path to location on Firebase which to update\n   * @param {Object|String|Boolean|Number} value - Value to update to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @return {Promise} Containing reference snapshot\n   */\n  const updateWithMeta = (path, value, onComplete) =>\n    withMeta('update', path, value, onComplete)\n\n  /**\n   * @description Removes data from Firebase at a given path. **NOTE** A\n   * seperate action is not dispatched unless `dispatchRemoveAction: true` is\n   * provided to config on store creation. That means that a listener must\n   * be attached in order for state to be updated when calling remove.\n   * @param {String} path - Path to location on Firebase which to remove\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @return {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   * const Example = ({ firebase: { remove } }) => (\n   *   <button onClick={() => remove('some/path')}>\n   *     Remove From Firebase\n   *   </button>\n   * )\n   * export default firebaseConnect()(Example)\n   */\n  const remove = (path, onComplete, options) =>\n    queryActions.remove(firebase, dispatch, path, options).then(() => {\n      if (typeof onComplete === 'function') onComplete()\n      return path\n    })\n\n  /**\n   * @description Sets data to Firebase only if the path does not already\n   * exist, otherwise it rejects. Internally uses a Firebase transaction to\n   * prevent a race condition between seperate clients calling uniqueSet.\n   * @param {String} path - Path to location on Firebase which to set\n   * @param {Object|String|Boolean|Number} value - Value to write to Firebase\n   * @param {Function} onComplete - Function to run on complete (`not required`)\n   * @return {Promise} Containing reference snapshot\n   * @example <caption>Basic</caption>\n   * import React, { Component } from 'react'\n   * import PropTypes from 'prop-types'\n   * import { firebaseConnect } from 'react-redux-firebase'\n   * const Example = ({ firebase: { uniqueSet } }) => (\n   *   <button onClick={() => uniqueSet('some/unique/path', true)}>\n   *     Unique Set To Firebase\n   *   </button>\n   * )\n   * export default firebaseConnect()(Example)\n   */\n  const uniqueSet = (path, value, onComplete) =>\n    firebase\n      .database()\n      .ref(path)\n      .transaction(d => (d === null ? value : undefined))\n      .then(({ committed, snapshot }) => {\n        if (!committed) {\n          const newError = new Error('Path already exists.')\n          if (onComplete) onComplete(newError)\n          return Promise.reject(newError)\n        }\n        if (onComplete) onComplete(snapshot)\n        return snapshot\n      })\n\n  /**\n   * @description Upload a file to Firebase Storage with the option to store\n   * its metadata in Firebase Database\n   * @param {String} path - Path to location on Firebase which to set\n   * @param {File} file - File object to upload (usually first element from\n   * array output of select-file or a drag/drop `onDrop`)\n   * @param {String} dbPath - Database path to place uploaded file metadata\n   * @param {Object} options - Options\n   * @param {String} options.name - Name of the file\n   * @return {Promise} Containing the File object\n   */\n  const uploadFile = (path, file, dbPath, options) =>\n    storageActions.uploadFile(dispatch, firebase, {\n      path,\n      file,\n      dbPath,\n      options\n    })\n\n  /**\n   * @description Upload multiple files to Firebase Storage with the option\n   * to store their metadata in Firebase Database\n   * @param {String} path - Path to location on Firebase which to set\n   * @param {Array} files - Array of File objects to upload (usually from\n   * a select-file or a drag/drop `onDrop`)\n   * @param {String} dbPath - Database path to place uploaded files metadata.\n   * @param {Object} options - Options\n   * @param {String} options.name - Name of the file\n   * @return {Promise} Containing an array of File objects\n   */\n  const uploadFiles = (path, files, dbPath, options) =>\n    storageActions.uploadFiles(dispatch, firebase, {\n      path,\n      files,\n      dbPath,\n      options\n    })\n\n  /**\n   * @description Delete a file from Firebase Storage with the option to\n   * remove its metadata in Firebase Database\n   * @param {String} path - Path to location on Firebase which to set\n   * @param {String} dbPath - Database path to place uploaded file metadata\n   * @return {Promise} Containing the File object\n   */\n  const deleteFile = (path, dbPath) =>\n    storageActions.deleteFile(dispatch, firebase, { path, dbPath })\n\n  /**\n   * @description Watch event. **Note:** this method is used internally\n   * so examples have not yet been created, and it may not work as expected.\n   * @param {String} type - Type of watch event\n   * @param {String} path - Path to location on Firebase which to set listener\n   * @param {String} storeAs - Name of listener results within redux store\n   * @param {Object} options - Event options object\n   * @param {Array} options.queryParams - List of parameters for the query\n   * @param {String} options.queryId - id of the query\n   * @return {Promise}\n   */\n  const watchEvent = (type, path, storeAs, options = {}) =>\n    queryActions.watchEvent(firebase, dispatch, {\n      type,\n      path,\n      storeAs,\n      ...options\n    })\n\n  /**\n   * @description Unset a listener watch event. **Note:** this method is used\n   * internally so examples have not yet been created, and it may not work\n   * as expected.\n   * @param {String} type - Type of watch event\n   * @param {String} path - Path to location on Firebase which to unset listener\n   * @param {String} queryId - Id of the listener\n   * @param {Object} options - Event options object\n   * @return {Promise}\n   */\n  const unWatchEvent = (type, path, queryId, options = {}) =>\n    queryActions.unWatchEvent(firebase, dispatch, {\n      type,\n      path,\n      queryId,\n      ...options\n    })\n\n  /**\n   * @description Similar to the firebaseConnect Higher Order Component but\n   * presented as a function (not a React Component). Useful for populating\n   * your redux state without React, e.g., for server side rendering. Only\n   * `once` type should be used as other query types such as `value` do not\n   * return a Promise.\n   * @param {Array} watchArray - Array of objects or strings for paths to sync\n   * from Firebase. Can also be a function that returns the array. The function\n   * is passed the props object specified as the next parameter.\n   * @param {Object} options - The options object that you would like to pass to\n   * your watchArray generating function.\n   * @return {Promise}\n   */\n  const promiseEvents = (watchArray, options) => {\n    const inputAsFunc = createCallable(watchArray)\n    const prevData = inputAsFunc(options, firebase)\n    const queryConfigs = getEventsFromInput(prevData)\n    // TODO: Handle calling with non promise queries (must be once or first_child)\n    return Promise.all(\n      queryConfigs.map(queryConfig =>\n        queryActions.watchEvent(firebase, dispatch, queryConfig)\n      )\n    )\n  }\n\n  /**\n   * @description Logs user into Firebase. For examples, visit the\n   * [auth section](/docs/auth.md)\n   * @param {Object} credentials - Credentials for authenticating\n   * @param {String} credentials.provider - External provider (google |\n   * facebook | twitter)\n   * @param {String} credentials.type - Type of external authentication\n   * (popup | redirect) (only used with provider)\n   * @param {String} credentials.email - Credentials for authenticating\n   * @param {String} credentials.password - Credentials for authenticating (only used with email)\n   * @return {Promise} Containing user's auth data\n   */\n  const login = credentials =>\n    authActions.login(dispatch, firebase, credentials)\n\n  /**\n   * @description Logs user into Firebase using external. For examples, visit the\n   * [auth section](/docs/recipes/auth.md)\n   * @param {Object} authData - Auth data from Firebase's getRedirectResult\n   * @return {Promise} Containing user's profile\n   */\n  const handleRedirectResult = authData =>\n    authActions.handleRedirectResult(dispatch, firebase, authData)\n\n  /**\n   * @description Logs user out of Firebase and empties firebase state from\n   * redux store\n   * @return {Promise}\n   */\n  const logout = () => authActions.logout(dispatch, firebase)\n\n  /**\n   * @description Creates a new user in Firebase authentication. If\n   * `userProfile` config option is set, user profiles will be set to this\n   * location.\n   * @param {Object} credentials - Credentials for authenticating\n   * @param {String} credentials.email - Credentials for authenticating\n   * @param {String} credentials.password - Credentials for authenticating (only used with email)\n   * @param {Object} profile - Data to include within new user profile\n   * @return {Promise} Containing user's auth data\n   */\n  const createUser = (credentials, profile) =>\n    authActions.createUser(dispatch, firebase, credentials, profile)\n\n  /**\n   * @description Sends password reset email\n   * @param {Object} credentials - Credentials for authenticating\n   * @param {String} credentials.email - Credentials for authenticating\n   * @return {Promise}\n   */\n  const resetPassword = credentials =>\n    authActions.resetPassword(dispatch, firebase, credentials)\n\n  /**\n   * @description Confirm that a user's password has been reset\n   * @param {String} code - Password reset code to verify\n   * @param {String} password - New Password to confirm reset to\n   * @return {Promise}\n   */\n  const confirmPasswordReset = (code, password) =>\n    authActions.confirmPasswordReset(dispatch, firebase, code, password)\n\n  /**\n   * @description Verify that a password reset code from a password reset\n   * email is valid\n   * @param {String} code - Password reset code to verify\n   * @return {Promise} Containing user auth info\n   */\n  const verifyPasswordResetCode = code =>\n    authActions.verifyPasswordResetCode(dispatch, firebase, code)\n\n  /**\n   * @description Update user profile on Firebase Real Time Database or\n   * Firestore (if `useFirestoreForProfile: true` config passed to\n   * reactReduxFirebase). Real Time Database update uses `update` method\n   * internally while updating profile on Firestore uses `set` with\n   * @param {Object} profileUpdate - Profile data to place in new profile\n   * @param {Object} options - Options object (used to change how profile\n   * update occurs)\n   * @param  {Boolean} [options.useSet=true] - Use set with merge instead of\n   * update. Setting to `false` uses update (can cause issue of profile document\n   * does not exist). Note: Only used when updating profile on Firestore\n   * @param  {Boolean} [options.merge=true] - Whether or not to use merge when\n   * setting profile. Note: Only used when updating profile on Firestore\n   * @return {Promise}\n   */\n  const updateProfile = (profileUpdate, options) =>\n    authActions.updateProfile(dispatch, firebase, profileUpdate, options)\n\n  /**\n   * @description Update Auth Object\n   * @param {Object} authUpdate - Update to be auth object\n   * @param {Boolean} updateInProfile - Update in profile\n   * @return {Promise}\n   */\n  const updateAuth = (authUpdate, updateInProfile) =>\n    authActions.updateAuth(dispatch, firebase, authUpdate, updateInProfile)\n\n  /**\n   * @description Update user's email\n   * @param {String} newEmail - Update to be auth object\n   * @param {Boolean} updateInProfile - Update in profile\n   * @return {Promise}\n   */\n  const updateEmail = (newEmail, updateInProfile) =>\n    authActions.updateEmail(dispatch, firebase, newEmail, updateInProfile)\n\n  /**\n   * @description Reload user's auth object. Must be authenticated.\n   * @return {Promise}\n   */\n  const reloadAuth = () => authActions.reloadAuth(dispatch, firebase)\n\n  /**\n   * @description Links the user account with the given credentials.\n   * @param {firebase.auth.AuthCredential} credential - The auth credential\n   * @return {Promise}\n   */\n  const linkWithCredential = credential =>\n    authActions.linkWithCredential(dispatch, firebase, credential)\n\n  /**\n   * @name signInWithPhoneNumber\n   * @description Asynchronously signs in using a phone number. This method\n   * sends a code via SMS to the given phone number, and returns a modified\n   * firebase.auth.ConfirmationResult. The `confirm` method\n   * authenticates and does profile handling.\n   * @param {firebase.auth.ConfirmationResult} credential - The auth credential\n   * @return {Promise}\n   */\n  /**\n   * @name initializeAuth\n   * @description Initialize auth to work with build in profile support\n   */\n  const actionCreators = mapWithFirebaseAndDispatch(\n    firebase,\n    dispatch,\n    // Actions with arg order (firebase, dispatch)\n    {\n      signInWithPhoneNumber: authActions.signInWithPhoneNumber\n    },\n    // Actions with arg order (dispatch, firebase)\n    {\n      initializeAuth: authActions.init\n    }\n  )\n\n  /**\n   * @name ref\n   * @description Firebase ref function\n   * @return {firebase.database.Reference}\n   */\n  /**\n   * @name database\n   * @description Firebase database service instance including all Firebase storage methods\n   * @return {firebase.database.Database} Firebase database service\n   */\n  /**\n   * @name storage\n   * @description Firebase storage service instance including all Firebase storage methods\n   * @return {firebase.database.Storage} Firebase storage service\n   */\n  /**\n   * @name auth\n   * @description Firebase auth service instance including all Firebase auth methods\n   * @return {firebase.database.Auth}\n   */\n  return Object.assign(firebase, {\n    ref: path => firebase.database().ref(path),\n    set,\n    setWithMeta,\n    uniqueSet,\n    push,\n    pushWithMeta,\n    remove,\n    update,\n    updateWithMeta,\n    login,\n    handleRedirectResult,\n    logout,\n    updateAuth,\n    updateEmail,\n    updateProfile,\n    uploadFile,\n    uploadFiles,\n    deleteFile,\n    createUser,\n    resetPassword,\n    confirmPasswordReset,\n    verifyPasswordResetCode,\n    watchEvent,\n    unWatchEvent,\n    reloadAuth,\n    linkWithCredential,\n    promiseEvents,\n    dispatch,\n    ...actionCreators\n  })\n}\n"],"file":"createFirebaseInstance.js"}