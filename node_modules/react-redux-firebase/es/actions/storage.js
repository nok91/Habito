"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.uploadFile=uploadFile,exports.uploadFiles=uploadFiles,exports.deleteFile=deleteFile;var _isFunction2=_interopRequireDefault(require("lodash/isFunction")),_map2=_interopRequireDefault(require("lodash/map")),_constants=require("../constants"),_actions=require("../utils/actions"),_storage=require("../utils/storage");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=_objectWithoutPropertiesLoose(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],!(0<=excluded.indexOf(key))&&Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null==arguments[i]?{}:arguments[i],ownKeys=Object.keys(source);"function"==typeof Object.getOwnPropertySymbols&&(ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable}))),ownKeys.forEach(function(key){_defineProperty(target,key,source[key])})}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var FILE_UPLOAD_START=_constants.actionTypes.FILE_UPLOAD_START,FILE_UPLOAD_ERROR=_constants.actionTypes.FILE_UPLOAD_ERROR,FILE_UPLOAD_COMPLETE=_constants.actionTypes.FILE_UPLOAD_COMPLETE,FILE_DELETE_START=_constants.actionTypes.FILE_DELETE_START,FILE_DELETE_ERROR=_constants.actionTypes.FILE_DELETE_ERROR,FILE_DELETE_COMPLETE=_constants.actionTypes.FILE_DELETE_COMPLETE;function uploadFile(dispatch,firebase,config){if(!firebase.storage)throw new Error("Firebase storage is required to upload files");var _ref=config||{},path=_ref.path,file=_ref.file,dbPath=_ref.dbPath,_ref$options=_ref.options,options=void 0===_ref$options?{progress:!1}:_ref$options,logErrors=firebase._.config.logErrors,nameFromOptions=(0,_isFunction2.default)(options.name)?options.name(file,firebase,config):options.name,filename=nameFromOptions||file.name,meta=_objectSpread({},config,{filename:filename});dispatch({type:FILE_UPLOAD_START,payload:_objectSpread({},config,{filename:filename})});return function uploadPromise(){return options.progress?(0,_storage.uploadFileWithProgress)(dispatch,firebase,{path:path,file:file,filename:filename,meta:meta}):firebase.storage().ref("".concat(path,"/").concat(filename)).put(file)}().then(function(uploadTaskSnapshot){return dbPath&&(firebase.database||firebase.firestore)?(0,_storage.writeMetadataToDb)({firebase:firebase,uploadTaskSnapshot:uploadTaskSnapshot,dbPath:dbPath,options:options}).then(function(payload){return dispatch({type:FILE_UPLOAD_COMPLETE,meta:_objectSpread({},config,{filename:filename}),payload:payload}),payload}):(dispatch({type:FILE_UPLOAD_COMPLETE,meta:_objectSpread({},config,{filename:filename}),payload:{uploadTaskSnapshot:uploadTaskSnapshot,uploadTaskSnaphot:uploadTaskSnapshot}}),{uploadTaskSnapshot:uploadTaskSnapshot,uploadTaskSnaphot:uploadTaskSnapshot})}).catch(function(err){return logErrors&&console.error&&console.error("RRF: Error uploading file: ".concat(err.message||err),err),dispatch({type:FILE_UPLOAD_ERROR,path:path,payload:err}),Promise.reject(err)})}function uploadFiles(dispatch,firebase,_ref2){var files=_ref2.files,other=_objectWithoutProperties(_ref2,["files"]);return Promise.all((0,_map2.default)(files,function(file){return uploadFile(dispatch,firebase,_objectSpread({file:file},other))}))}function deleteFile(dispatch,firebase,_ref3){var path=_ref3.path,dbPath=_ref3.dbPath;return(0,_actions.wrapInDispatch)(dispatch,{method:_storage.deleteFile,args:[firebase,{path:path,dbPath:dbPath}],types:[FILE_DELETE_START,FILE_DELETE_COMPLETE,FILE_DELETE_ERROR]})}
//# sourceMappingURL=storage.js.map