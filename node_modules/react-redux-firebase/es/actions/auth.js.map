{"version":3,"sources":["../../src/actions/auth.js"],"names":["dispatchLoginError","dispatch","authError","type","actionTypes","LOGIN_ERROR","unWatchUserProfile","firebase","_","authUid","config","userProfile","useFirestoreForProfile","profileWatch","firestore","database","ref","child","off","getProfileFromSnap","snap","val","data","exists","handleProfileWatchResponse","userProfileSnap","profileParamsToPopulate","autoPopulateProfile","logErrors","profile","key","then","result","path","SET","timestamp","Date","now","requesting","requested","SET_PROFILE","populates","catch","err","console","error","UNAUTHORIZED_ERROR","message","warn","createProfileWatchErrorHandler","onProfileListenerError","factoryResult","Promise","reject","watchUserProfile","collection","doc","onSnapshot","on","Error","createUserProfile","userData","resolve","profileFactory","uid","user","get","profileSnap","updateProfileOnLogin","newProfile","userDataObject","toJSON","keysToRemoveFromAuth","avatarUrl","photoURL","providerData","map","providerDataItem","keysToPreserveFromProviderData","set","merge","once","update","onProfileWriteError","handleAuthStateChange","authData","presence","LOGIN","auth","preserve","preserveOnLogin","onAuthStateChanged","AUTH_EMPTY_CHANGE","preserveOnEmptyAuthChange","handleRedirectResult","onRedirectResult","email","displayName","init","AUTHENTICATION_INIT_STARTED","enableRedirectHandling","getRedirectResult","window","location","protocol","indexOf","currentUser","AUTHENTICATION_INIT_FINISHED","login","credentials","resetBeforeLogin","method","params","includes","confirm","code","additionalUserInfo","phoneNumber","logout","signOut","action","LOGOUT","preserveOnLogout","createUser","password","signIn","createUserWithEmailAndPassword","resetPassword","sendPasswordResetEmail","confirmPasswordReset","verifyPasswordResetCode","updateProfile","profileUpdate","PROFILE_UPDATE_START","payload","updatePromise","updateProfileOnFirestore","updateProfileOnRTDB","PROFILE_UPDATE_SUCCESS","PROFILE_UPDATE_ERROR","updateAuth","authUpdate","updateInProfile","AUTH_UPDATE_START","AUTH_UPDATE_ERROR","AUTH_UPDATE_SUCCESS","updateEmail","newEmail","EMAIL_UPDATE_START","EMAIL_UPDATE_ERROR","EMAIL_UPDATE_SUCCESS","reloadAuth","AUTH_RELOAD_START","AUTH_RELOAD_ERROR","reload","AUTH_RELOAD_SUCCESS","linkWithCredential","credential","AUTH_LINK_START","AUTH_LINK_ERROR","AUTH_LINK_SUCCESS","signInWithPhoneNumber","applicationVerifier","options"],"mappings":"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","sourcesContent":["import { isArray, isString, isFunction, forEach, omit, pick } from 'lodash'\nimport { actionTypes } from '../constants'\nimport { populate } from '../helpers'\nimport {\n  getLoginMethodAndParams,\n  updateProfileOnRTDB,\n  updateProfileOnFirestore,\n  setupPresence\n} from '../utils/auth'\nimport { promisesForPopulate, getPopulateObjs } from '../utils/populate'\n\n/**\n * @description Dispatch login error action\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} authError - Error object\n * @private\n */\nfunction dispatchLoginError(dispatch, authError) {\n  return dispatch({\n    type: actionTypes.LOGIN_ERROR,\n    authError\n  })\n}\n\n/**\n * @description Remove listener from user profile\n * @param {Object} firebase - Internal firebase object\n * @private\n */\nexport function unWatchUserProfile(firebase) {\n  const {\n    authUid,\n    config: { userProfile, useFirestoreForProfile }\n  } = firebase._\n  if (firebase._.profileWatch) {\n    if (useFirestoreForProfile && firebase.firestore) {\n      // Call profile onSnapshot unsubscribe stored on profileWatch\n      firebase._.profileWatch()\n    } else {\n      firebase\n        .database()\n        .ref()\n        .child(`${userProfile}/${authUid}`)\n        .off('value', firebase._.profileWatch)\n    }\n    firebase._.profileWatch = null\n  }\n}\n\nfunction getProfileFromSnap(snap) {\n  // Real Time Database\n  if (snap && snap.val) {\n    return snap.val()\n  }\n  // Firestore\n  if (snap && snap.data && snap.exists) {\n    return snap.data()\n  }\n  return null\n}\n\n/**\n * Handle response from profile listener. Works with both Real Time Database and\n * Cloud Firestore.\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {firebase.database.Snapshot|firebase.firestore.DocumentSnapshot} userProfileSnap\n * Snapshot from profile watcher\n * @private\n */\nexport function handleProfileWatchResponse(\n  dispatch,\n  firebase,\n  userProfileSnap\n) {\n  const {\n    profileParamsToPopulate,\n    autoPopulateProfile,\n    useFirestoreForProfile,\n    logErrors\n  } = firebase._.config\n  const profile = getProfileFromSnap(userProfileSnap)\n  if (\n    !profileParamsToPopulate ||\n    useFirestoreForProfile || // populating profile through firestore not yet supported\n    (!isArray(profileParamsToPopulate) && !isString(profileParamsToPopulate))\n  ) {\n    if (useFirestoreForProfile && profileParamsToPopulate) {\n      console.warn('Profile population is not yet supported for Firestore') // eslint-disable-line no-console\n    }\n    dispatch({ type: actionTypes.SET_PROFILE, profile })\n  } else {\n    // Convert array of populate config into an array of once query promises\n    promisesForPopulate(\n      firebase,\n      userProfileSnap.key,\n      profile,\n      profileParamsToPopulate\n    )\n      .then(data => {\n        // Fire actions for placement of data gathered in populate into redux\n        forEach(data, (result, path) => {\n          dispatch({\n            type: actionTypes.SET,\n            path,\n            data: result,\n            timestamp: Date.now(),\n            requesting: false,\n            requested: true\n          })\n        })\n        if (!autoPopulateProfile) {\n          // Dispatch action with profile combined with populated parameters\n          dispatch({ type: actionTypes.SET_PROFILE, profile })\n        } else {\n          // Auto Populate profile\n          const populates = getPopulateObjs(profileParamsToPopulate)\n          const profile = userProfileSnap.val()\n          dispatch({\n            type: actionTypes.SET_PROFILE,\n            profile: populate({ profile, data }, 'profile', populates)\n          })\n        }\n      })\n      .catch(err => {\n        if (logErrors) {\n          // eslint-disable-next-line no-console\n          console.error(\n            `RRF: Error retrieving data for profile population. Firebase:`,\n            err\n          )\n        }\n        // Error retrieving data for population onto profile.\n        dispatch({\n          type: actionTypes.UNAUTHORIZED_ERROR,\n          authError: `Error during profile population: ${err.message}`\n        })\n        // Update profile with un-populated version\n        dispatch({ type: actionTypes.SET_PROFILE, profile })\n      })\n  }\n}\n\n/**\n * Creates a function for handling errors from profile watcher. Used for\n * both RTDB and Firestore.\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @return {Function} Profile watch error handler function\n * @private\n */\nfunction createProfileWatchErrorHandler(dispatch, firebase) {\n  const { config: { onProfileListenerError, logErrors } } = firebase._\n  return function handleProfileError(err) {\n    if (logErrors) {\n      // eslint-disable-next-line no-console\n      console.error(`Error with profile listener: ${err.message || ''}`, err)\n    }\n    if (isFunction(onProfileListenerError)) {\n      const factoryResult = onProfileListenerError(err, firebase)\n      // Return factoryResult if it is a promise\n      if (isFunction(factoryResult.then)) {\n        return factoryResult\n      }\n    }\n    return Promise.reject(err)\n  }\n}\n\n/**\n * @description Watch user profile. Internally dispatches sets firebase._.profileWatch\n * and calls SET_PROFILE actions. Supports both Realtime Database and Firestore\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @private\n */\nexport const watchUserProfile = (dispatch, firebase) => {\n  const {\n    authUid,\n    config: { userProfile, useFirestoreForProfile }\n  } = firebase._\n  unWatchUserProfile(firebase)\n\n  if (userProfile) {\n    if (useFirestoreForProfile && firebase.firestore) {\n      firebase._.profileWatch = firebase // eslint-disable-line no-param-reassign\n        .firestore()\n        .collection(userProfile)\n        .doc(authUid)\n        .onSnapshot(\n          userProfileSnap =>\n            handleProfileWatchResponse(dispatch, firebase, userProfileSnap),\n          createProfileWatchErrorHandler(dispatch, firebase)\n        )\n    } else if (firebase.database) {\n      firebase._.profileWatch = firebase // eslint-disable-line no-param-reassign\n        .database()\n        .ref()\n        .child(`${userProfile}/${authUid}`)\n        .on(\n          'value',\n          userProfileSnap =>\n            handleProfileWatchResponse(dispatch, firebase, userProfileSnap),\n          createProfileWatchErrorHandler(dispatch, firebase)\n        )\n    } else {\n      throw new Error(\n        'Real Time Database or Firestore must be included to enable user profile'\n      )\n    }\n  }\n}\n\n/**\n * @description Create user profile if it does not already exist.\n * `updateProfileOnLogin: false` can be passed to config to disable updating.\n * Profile factory is applied if it exists and is a function.\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {Object} userData - User data object (response from authenticating)\n * @param {Object} profile - Profile data to place in new profile\n * @return {Promise}\n * @private\n */\nexport const createUserProfile = (dispatch, firebase, userData, profile) => {\n  const { _: { config } } = firebase\n  if (!config.userProfile || (!firebase.database && !firebase.firestore)) {\n    return Promise.resolve(userData)\n  }\n  // use profileFactory if it exists in config\n  if (isFunction(config.profileFactory)) {\n    // catch errors in user provided profileFactory function\n    try {\n      profile = config.profileFactory(userData, profile) // eslint-disable-line no-param-reassign\n    } catch (err) {\n      /* eslint-disable no-console */\n      console.error(\n        'Error occured within profileFactory function:',\n        err.message || err\n      )\n      /* eslint-enable no-console */\n      return Promise.reject(err)\n    }\n  }\n\n  // Check/Write profile using Firestore\n  if (config.useFirestoreForProfile) {\n    // Check for user's profile at userProfile path if provided\n    return firebase\n      .firestore()\n      .collection(config.userProfile)\n      .doc(userData.uid || userData.user.uid)\n      .get()\n      .then(profileSnap => {\n        // Return if config for updating profile is not enabled and profile exists\n        if (!config.updateProfileOnLogin && profileSnap.exists) {\n          return profileSnap.data()\n        }\n        let newProfile = profile\n\n        // If the user did supply a profileFactory, we should use the result of it for the new Profile\n        if (!newProfile) {\n          // Convert to JSON format (to prevent issue of writing invalid type to Firestore)\n          const userDataObject = userData.uid\n            ? userData.toJSON ? userData.toJSON() : userData\n            : userData.user.toJSON ? userData.user.toJSON() : userData.user\n          // Remove unnecessary auth params (configurable) and preserve types of timestamps\n          newProfile = {\n            ...omit(userDataObject, config.keysToRemoveFromAuth),\n            avatarUrl: userDataObject.photoURL // match profile pattern used for RTDB\n          }\n        }\n\n        // Convert custom object type within Provider data to a normal object\n        if (isArray(newProfile.providerData)) {\n          newProfile.providerData = newProfile.providerData.map(\n            providerDataItem =>\n              pick(providerDataItem, config.keysToPreserveFromProviderData)\n          )\n        }\n\n        // Create/Update the profile\n        return profileSnap.ref\n          .set(newProfile, { merge: true })\n          .then(() => newProfile)\n      })\n      .catch(err => {\n        // Error reading user profile\n        dispatch({ type: actionTypes.UNAUTHORIZED_ERROR, authError: err })\n        return Promise.reject(err)\n      })\n  }\n\n  // Check/Write profile using Firebase RTDB\n  return firebase\n    .database()\n    .ref()\n    .child(\n      `${config.userProfile}/${\n        userData.user ? userData.user.uid : userData.uid\n      }`\n    )\n    .once('value')\n    .then(\n      profileSnap =>\n        // update profile only if doesn't exist or if set by config\n        !config.updateProfileOnLogin && profileSnap.val() !== null\n          ? profileSnap.val()\n          : profileSnap.ref.update(profile).then(() => profile) // Update the profile\n    )\n    .catch(err => {\n      // Error reading user profile\n      dispatch({ type: actionTypes.UNAUTHORIZED_ERROR, authError: err })\n      if (isFunction(config.onProfileWriteError)) {\n        config.onProfileWriteError(err, firebase)\n      }\n      return Promise.reject(err)\n    })\n}\n\n/**\n * Auth state change handler. Handles response from firebase's onAuthStateChanged\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param  {Object} authData - Auth data from firebase's onAuthStateChanged\n * @private\n */\nconst handleAuthStateChange = (dispatch, firebase, authData) => {\n  const { config } = firebase._\n  if (!authData) {\n    // Run onAuthStateChanged if it exists in config and enableEmptyAuthChanges is set to true\n    if (isFunction(config.onAuthStateChanged)) {\n      firebase._.config.onAuthStateChanged(authData, firebase, dispatch)\n    }\n    dispatch({\n      type: actionTypes.AUTH_EMPTY_CHANGE,\n      preserve: config.preserveOnEmptyAuthChange\n    })\n  } else {\n    firebase._.authUid = authData.uid // eslint-disable-line no-param-reassign\n\n    // setup presence if settings and database exist\n    if (config.presence) {\n      setupPresence(dispatch, firebase)\n    }\n\n    dispatch({\n      type: actionTypes.LOGIN,\n      auth: authData,\n      preserve: config.preserveOnLogin\n    })\n\n    watchUserProfile(dispatch, firebase)\n\n    // Run onAuthStateChanged if it exists in config\n    if (isFunction(config.onAuthStateChanged)) {\n      config.onAuthStateChanged(authData, firebase, dispatch)\n    }\n  }\n}\n\n/**\n * Redirect result handler\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param  {Object} authData - Auth data from Firebase's getRedirectResult\n * @private\n */\nexport const handleRedirectResult = (dispatch, firebase, authData) => {\n  // Run onRedirectResult if it exists in config\n  if (typeof firebase._.config.onRedirectResult === 'function') {\n    firebase._.config.onRedirectResult(authData, firebase, dispatch)\n  }\n  if (authData && authData.user) {\n    const { user } = authData\n\n    firebase._.authUid = user.uid // eslint-disable-line no-param-reassign\n    watchUserProfile(dispatch, firebase)\n\n    dispatch({\n      type: actionTypes.LOGIN,\n      auth: user,\n      preserve: firebase._.config.preserveOnLogin\n    })\n\n    return createUserProfile(dispatch, firebase, user, {\n      email: user.email,\n      displayName: user.providerData[0].displayName || user.email,\n      avatarUrl: user.providerData[0].photoURL,\n      providerData: user.providerData\n    })\n  }\n}\n\n/**\n * @description Initialize authentication state change listener that\n * watches user profile and dispatches login action\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @private\n */\nexport const init = (dispatch, firebase) => {\n  // exit if auth does not exist\n  if (!firebase.auth) {\n    return\n  }\n  dispatch({ type: actionTypes.AUTHENTICATION_INIT_STARTED })\n  // Set Auth State listener\n  firebase\n    .auth()\n    .onAuthStateChanged(authData =>\n      handleAuthStateChange(dispatch, firebase, authData)\n    )\n\n  // set redirect result callback if enableRedirectHandling set to true\n  if (\n    firebase._.config.enableRedirectHandling &&\n    isFunction(firebase.auth().getRedirectResult) &&\n    (typeof window !== 'undefined' &&\n      window.location &&\n      window.location.protocol &&\n      window.location.protocol.indexOf('http') !== -1)\n  ) {\n    firebase\n      .auth()\n      .getRedirectResult()\n      .then(authData => handleRedirectResult(dispatch, firebase, authData))\n      .catch(error => {\n        dispatchLoginError(dispatch, error)\n        return Promise.reject(error)\n      })\n  }\n\n  firebase.auth().currentUser // eslint-disable-line no-unused-expressions\n\n  dispatch({ type: actionTypes.AUTHENTICATION_INIT_FINISHED })\n}\n\n/**\n * @description Login with errors dispatched\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {Object} credentials - Login credentials\n * @param {Object} credentials.email - Email to login with (only needed for email login)\n * @param {Object} credentials.password - Password to login with (only needed for email login)\n * @param {Object} credentials.provider - Provider name such as google, twitter (only needed for 3rd party provider login)\n * @param {Object} credentials.type - Popup or redirect (only needed for 3rd party provider login)\n * @param {Object} credentials.token - Custom or provider token\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or provider token\n * @param {Array|String} credentials.scopes - Scopes to add to provider (i.e. email)\n * @return {Promise}\n * @private\n */\nexport const login = (dispatch, firebase, credentials) => {\n  if (firebase._.config.resetBeforeLogin) {\n    dispatchLoginError(dispatch, null)\n  }\n\n  const { method, params } = getLoginMethodAndParams(firebase, credentials)\n\n  return firebase\n    .auth()\n    [method](...params)\n    .then(userData => {\n      // Handle null response from getRedirectResult before redirect has happened\n      if (!userData) return Promise.resolve(null)\n\n      // For email auth return uid (createUser is used for creating a profile)\n      if (\n        [\n          'signInWithEmailAndPassword',\n          'signInAndRetrieveDataWithEmailAndPassword'\n        ].includes(method)\n      ) {\n        return { user: userData }\n      }\n      // TODO: Only call createUserProfile once, and just pass different settings\n\n      // For token auth, the user key doesn't exist. Instead, return the JWT.\n      if (\n        [\n          'signInWithCustomToken',\n          'signInAndRetrieveDataWithCustomToken'\n        ].includes(method)\n      ) {\n        if (!firebase._.config.updateProfileOnLogin) {\n          return { user: userData }\n        }\n        return createUserProfile(\n          dispatch,\n          firebase,\n          userData,\n          credentials.profile\n        )\n      }\n\n      if (method === 'signInWithPhoneNumber') {\n        // Modify confirm method to include profile creation\n        return {\n          ...userData,\n          confirm: code =>\n            // Call original confirm\n            userData.confirm(code).then(({ user, additionalUserInfo }) =>\n              createUserProfile(dispatch, firebase, user, {\n                phoneNumber: user.providerData[0].phoneNumber,\n                providerData: user.providerData\n              }).then(profile => ({ profile, user, additionalUserInfo }))\n            )\n        }\n      }\n\n      // Create profile when logging in with external provider\n      const user = userData.user || userData\n\n      return createUserProfile(\n        dispatch,\n        firebase,\n        user,\n        credentials.profile || {\n          email: user.email,\n          displayName: user.providerData[0].displayName || user.email,\n          avatarUrl: user.providerData[0].photoURL,\n          providerData: user.providerData\n        }\n      ).then(profile => ({ profile, ...userData }))\n    })\n    .catch(err => {\n      dispatchLoginError(dispatch, err)\n      return Promise.reject(err)\n    })\n}\n\n/**\n * @description Logout of firebase and dispatch logout event\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @private\n */\nexport const logout = (dispatch, firebase) => {\n  // detach profile listener before logging out to prevent permission_denied\n  // errors (for more info see #494)\n  unWatchUserProfile(firebase)\n  return firebase\n    .auth()\n    .signOut()\n    .then(() => {\n      const action = {\n        type: actionTypes.LOGOUT\n      }\n      if (firebase._.config.preserveOnLogout) {\n        action.preserve = firebase._.config.preserveOnLogout\n      }\n      dispatch(action)\n      firebase._.authUid = null\n      return firebase\n    })\n}\n\n/**\n * @description Create a new user in auth and add an account to userProfile root\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {Object} credentials - Login credentials\n * @return {Promise}\n * @private\n */\nexport const createUser = (\n  dispatch,\n  firebase,\n  { email, password, signIn },\n  profile\n) => {\n  dispatchLoginError(dispatch, null)\n\n  if (!email || !password) {\n    const error = new Error('Email and Password are required to create user')\n    dispatchLoginError(dispatch, error)\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(\n      userData =>\n        // Login to newly created account if signIn flag is not set to false\n        firebase.auth().currentUser || (!!signIn && signIn === false)\n          ? createUserProfile(\n              dispatch,\n              firebase,\n              userData,\n              profile || { email }\n            )\n          : login(dispatch, firebase, { email, password })\n              .then(() =>\n                createUserProfile(\n                  dispatch,\n                  firebase,\n                  userData,\n                  profile || { email }\n                )\n              )\n              .catch(err => {\n                if (err) {\n                  switch (err.code) {\n                    case 'auth/user-not-found':\n                      dispatchLoginError(\n                        dispatch,\n                        new Error('The specified user account does not exist.')\n                      )\n                      break\n                    default:\n                      dispatchLoginError(dispatch, err)\n                  }\n                }\n                return Promise.reject(err)\n              })\n    )\n    .catch(err => {\n      dispatchLoginError(dispatch, err)\n      return Promise.reject(err)\n    })\n}\n\n/**\n * @description Send password reset email to provided email\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {String} email - Email to send recovery email to\n * @return {Promise}\n * @private\n */\nexport const resetPassword = (dispatch, firebase, email) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .sendPasswordResetEmail(email)\n    .catch(err => {\n      if (err) {\n        switch (err.code) {\n          case 'auth/user-not-found':\n            dispatchLoginError(\n              dispatch,\n              new Error('The specified user account does not exist.')\n            )\n            break\n          default:\n            dispatchLoginError(dispatch, err)\n        }\n        return Promise.reject(err)\n      }\n    })\n}\n\n/**\n * @description Confirm the password reset with code and password\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {String} code - Email confirmation reset code\n * @param {String} password - Password to set it to\n * @return {Promise}\n * @private\n */\nexport const confirmPasswordReset = (dispatch, firebase, code, password) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .confirmPasswordReset(code, password)\n    .catch(err => {\n      if (err) {\n        switch (err.code) {\n          case 'auth/expired-action-code':\n            dispatchLoginError(\n              dispatch,\n              new Error('The action code has expired.')\n            )\n            break\n          case 'auth/invalid-action-code':\n            dispatchLoginError(\n              dispatch,\n              new Error('The action code is invalid.')\n            )\n            break\n          case 'auth/user-disabled':\n            dispatchLoginError(dispatch, new Error('The user is disabled.'))\n            break\n          case 'auth/user-not-found':\n            dispatchLoginError(dispatch, new Error('The user is not found.'))\n            break\n          case 'auth/weak-password':\n            dispatchLoginError(\n              dispatch,\n              new Error('The password is not strong enough.')\n            )\n            break\n          default:\n            dispatchLoginError(dispatch, err)\n        }\n        return Promise.reject(err)\n      }\n    })\n}\n\n/**\n * @description Verify that password reset code is valid\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {String} code - Password reset code\n * @return {Promise} email - Email associated with reset code\n * @private\n */\nexport const verifyPasswordResetCode = (dispatch, firebase, code) => {\n  dispatchLoginError(dispatch, null)\n  return firebase\n    .auth()\n    .verifyPasswordResetCode(code)\n    .catch(err => {\n      if (err) {\n        dispatchLoginError(dispatch, err)\n      }\n      return Promise.reject(err)\n    })\n}\n\n/**\n * @description Update user profile\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {Object} userData - User data object (response from authenticating)\n * @param {Object} profile - Profile data to place in new profile\n * @return {Promise}\n * @private\n */\nexport const updateProfile = (dispatch, firebase, profileUpdate) => {\n  const { _: { config } } = firebase\n  dispatch({\n    type: actionTypes.PROFILE_UPDATE_START,\n    payload: profileUpdate\n  })\n  // Select update promise type (firebase/firestore) based on config\n  const updatePromise = config.useFirestoreForProfile\n    ? updateProfileOnFirestore\n    : updateProfileOnRTDB\n  return updatePromise(firebase, profileUpdate)\n    .then(snap => {\n      dispatch({\n        type: actionTypes.PROFILE_UPDATE_SUCCESS,\n        payload: config.useFirestoreForProfile ? snap.data() : snap.val()\n      })\n      return snap\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.PROFILE_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * @description Update Auth Object. Internally calls\n * `firebase.auth().currentUser.updateProfile` as seen [in the firebase docs](https://firebase.google.com/docs/auth/web/manage-users#update_a_users_profile).\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {Object} profileUpdate - Update to be auth object\n * @return {Promise}\n * @private\n */\nexport const updateAuth = (dispatch, firebase, authUpdate, updateInProfile) => {\n  dispatch({ type: actionTypes.AUTH_UPDATE_START, payload: authUpdate })\n\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to update auth.')\n    dispatch({ type: actionTypes.AUTH_UPDATE_ERROR, payload: error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.updateProfile(authUpdate)\n    .then(payload => {\n      dispatch({\n        type: actionTypes.AUTH_UPDATE_SUCCESS,\n        auth: firebase.auth().currentUser\n      })\n      if (updateInProfile) {\n        return updateProfile(dispatch, firebase, authUpdate)\n      }\n      return payload\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.AUTH_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * @description Update user's email within Firebase auth and optionally within\n * users's profile. Internally calls `firebase.auth().currentUser.updateEmail`.\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {String} newEmail - Update to be auth object\n * @param {Boolean} updateInProfile - Whether or not to update email within\n * user's profile object (stored under path provided to userProfile config)\n * @return {Promise}\n * @private\n */\nexport const updateEmail = (dispatch, firebase, newEmail, updateInProfile) => {\n  dispatch({ type: actionTypes.EMAIL_UPDATE_START, payload: newEmail })\n\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to update email.')\n    dispatch({ type: actionTypes.EMAIL_UPDATE_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.updateEmail(newEmail)\n    .then(payload => {\n      dispatch({ type: actionTypes.EMAIL_UPDATE_SUCCESS, payload: newEmail })\n      if (updateInProfile) {\n        return updateProfile(dispatch, firebase, { email: newEmail })\n      }\n      return payload\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.EMAIL_UPDATE_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * @description Reload Auth state. Internally calls\n * `firebase.auth().currentUser.reload`.\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @return {Promise} Resolves with auth\n */\nexport const reloadAuth = (dispatch, firebase) => {\n  dispatch({ type: actionTypes.AUTH_RELOAD_START })\n\n  // reject and dispatch error if not logged in\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to reload auth.')\n    dispatch({ type: actionTypes.AUTH_RELOAD_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.reload()\n    .then(() => {\n      const auth = firebase.auth().currentUser\n      dispatch({ type: actionTypes.AUTH_RELOAD_SUCCESS, payload: auth })\n      return auth\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.AUTH_RELOAD_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * @description Links the user account with the given credentials. Internally\n * calls `firebase.auth().currentUser.linkWithCredential`.\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {Object} credential - Credential with which to link user account\n * @return {Promise} Resolves with auth\n */\nexport const linkWithCredential = (dispatch, firebase, credential) => {\n  dispatch({ type: actionTypes.AUTH_LINK_START })\n\n  // reject and dispatch error if not logged in\n  if (!firebase.auth().currentUser) {\n    const error = new Error('User must be logged in to link with credential.')\n    dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n    return Promise.reject(error)\n  }\n\n  return firebase\n    .auth()\n    .currentUser.linkWithCredential(credential)\n    .then(auth => {\n      dispatch({ type: actionTypes.AUTH_LINK_SUCCESS, payload: auth })\n      return auth\n    })\n    .catch(error => {\n      dispatch({ type: actionTypes.AUTH_LINK_ERROR, error })\n      return Promise.reject(error)\n    })\n}\n\n/**\n * @description Asynchronously signs in using a phone number and create's\n * user profile. This method sends a code via SMS to the given phone number,\n * and returns a firebase.auth.ConfirmationResult. Internally\n * calls `firebase.auth().signInWithPhoneNumber`.\n * @param {Function} dispatch - Action dispatch function\n * @param {Object} firebase - Internal firebase object\n * @param {String} phoneNumber - Phone number\n * @param {Object} applicationVerifier - Phone number\n * @return {Promise} Resolves with auth\n */\nexport function signInWithPhoneNumber(\n  firebase,\n  dispatch,\n  phoneNumber,\n  applicationVerifier,\n  options = {}\n) {\n  return login(dispatch, firebase, {\n    phoneNumber,\n    applicationVerifier,\n    ...options\n  })\n}\n"],"file":"auth.js"}