{"version":3,"sources":["../src/withFirebase.js"],"names":["createWithFirebase","WrappedComponent","WithFirebase","props","Component","HoistedComp","withFirebase","firebase","dispatch","displayName","wrappedComponent"],"mappings":"qiGA0BO,GAAMA,CAAAA,kBAAkB,CAAG,kEAAY,OAAZ,OAAwB,UAAAC,gBAAgB,CAAI,IACtEC,CAAAA,YADsE,uRAIjE,CACP,MAAO,8BAAC,gBAAD,CAAsB,KAAKC,KAA3B,CACR,CANyE,kBACjDC,gBADiD,kBACtEF,YADsE,oBAEhDD,gBAFgD,KAStEI,CAAAA,WAAW,CAAG,kCAAaH,YAAb,CAA2BD,gBAA3B,CATwD,CAWtEK,YAAY,CAAG,SAAAH,KAAK,QACxB,8BAAC,kCAAD,CAA2B,QAA3B,MACG,SAAAI,QAAQ,QACP,8BAAC,WAAD,WACE,QAAQ,CAAEA,QADZ,CAEE,QAAQ,CAAEA,QAAQ,CAACC,QAFrB,EAGML,KAHN,EADO,CADX,CADwB,CAXkD,CA0B5E,MAHAG,CAAAA,YAAY,CAACG,WAAb,CAA2B,2BAAgBR,gBAAhB,CAAkC,cAAlC,CAG3B,CAFAK,YAAY,CAACI,gBAAb,CAAgCT,gBAEhC,CAAOK,YACR,CA3BiC,CAA3B,C,2DAmFQN,kBAAkB,E","sourcesContent":["import React, { Component } from 'react'\nimport hoistStatics from 'hoist-non-react-statics'\nimport { wrapDisplayName } from './utils'\nimport ReactReduxFirebaseContext from './ReactReduxFirebaseContext'\n\n/**\n * @name createWithFirebase\n * @description Function that creates a Higher Order Component that\n * which provides `firebase` and `dispatch` as a props to React Components.\n *\n * **WARNING!!** This is an advanced feature, and should only be used when\n * needing to access a firebase instance created under a different store key.\n * @param {String} [storeKey='store'] - Name of redux store which contains\n * Firebase state (`state.firebase`)\n * @return {Function} - Higher Order Component which accepts an array of\n * watchers config and wraps a React Component\n * @example <caption>Basic</caption>\n * // props.firebase set on App component as firebase object with helpers\n * import { createWithFirebase } from 'react-redux-firebase'\n *\n * // create withFirebase that uses another redux store\n * const withFirebase = createWithFirebase('anotherStore')\n *\n * // use the withFirebase to wrap a component\n * export default withFirebase(SomeComponent)\n */\nexport const createWithFirebase = (storeKey = 'store') => WrappedComponent => {\n  class WithFirebase extends Component {\n    static wrappedComponent = WrappedComponent\n\n    render() {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n\n  const HoistedComp = hoistStatics(WithFirebase, WrappedComponent)\n\n  const withFirebase = props => (\n    <ReactReduxFirebaseContext.Consumer>\n      {firebase => (\n        <HoistedComp\n          firebase={firebase}\n          dispatch={firebase.dispatch}\n          {...props}\n        />\n      )}\n    </ReactReduxFirebaseContext.Consumer>\n  )\n\n  withFirebase.displayName = wrapDisplayName(WrappedComponent, 'withFirebase')\n  withFirebase.wrappedComponent = WrappedComponent\n\n  return withFirebase\n}\n\n/**\n * @name withFirebase\n * @extends React.Component\n * @description Higher Order Component that provides `firebase` and\n * `dispatch` as a props to React Components. Firebase is gathered from\n * `store.firebase`, which is attached to store by the store enhancer\n * (`reactReduxFirebase`) during setup.\n * **NOTE**: This version of the Firebase library has extra methods, config,\n * and functionality which give it it's capabilities such as dispatching\n * actions.\n * @return {Function} - Which accepts a component to wrap and returns the\n * wrapped component\n * @example <caption>Basic</caption>\n * import { withFirebase } from 'react-redux-firebase'\n *\n * function AddData({ firebase: { push } }) {\n *   return (\n *     <div>\n *       <button onClick={() => push('todos', { done: false, text: 'Sample' })}>\n *         Add Sample Todo\n *       </button>\n *     </div>\n *   )\n * }\n *\n * export default withFirebase(AddData)\n * @example <caption>Within HOC Composition</caption>\n * import { compose } from 'redux' // can also come from recompose\n * import { withHandlers } from 'recompose'\n * import { withFirebase } from 'react-redux-firebase'\n *\n * function AddTodo({ addTodo }) {\n *   return (\n *     <div>\n *       <button onClick={addTodo}>\n *         Add Sample Todo\n *       </button>\n *     </div>\n *   )\n * }\n *\n * const enhance = compose(\n *   withFirebase,\n *   withHandlers({\n *     addTodo: props => () =>\n *        props.firestore.add(\n *          { collection: 'todos' },\n *          { done: false, text: 'Sample' }\n *        )\n *   })\n * )\n *\n * export default enhance(AddTodo)\n */\nexport default createWithFirebase()\n"],"file":"withFirebase.js"}