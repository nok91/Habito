{"version":3,"sources":["../src/useFirestoreConnect.js"],"names":["createUseFirestoreConnect","dataOrFn","firestore","inputAsFunc","data","payload","Error","setListeners","unsetListeners"],"mappings":"iYAqBO,GAAMA,CAAAA,yBAAyB,CAAG,iBAAM,UAAAC,QAAQ,CAAI,IACnDC,CAAAA,SAAS,CAAG,2BADuC,CAGnDC,WAAW,CAAG,0BAAeF,QAAf,CAHqC,CAKnDG,IAAI,CAAGD,WAAW,EALiC,CAOnDE,OAAO,CAAG,mBACd,UAAM,CACJ,GAAI,CAACD,IAAL,CACE,MAAO,KAAP,CAEF,GAAI,sBAAQA,IAAR,CAAJ,CACE,KAAM,IAAIE,CAAAA,KAAJ,CAAU,sDAAV,CAAN,CAEF,MAAO,CAACF,IAAD,CACR,CATa,CAUd,CAACA,IAAD,CAVc,CAPyC,CAoBzD,qBACE,UAAM,CACJ,GAAa,IAAT,GAAAA,IAAJ,CAEE,MADAF,CAAAA,SAAS,CAACK,YAAV,CAAuBF,OAAvB,CACA,CAAO,UAAM,CACXH,SAAS,CAACM,cAAV,CAAyBH,OAAzB,CACD,CAEJ,CARH,CASE,CAACD,IAAD,CATF,CAWD,CA/BwC,CAAlC,C,yEAsFQJ,yBAAyB,E","sourcesContent":["import { isArray } from 'lodash'\nimport { useMemo, useEffect } from 'react'\nimport { createCallable } from './utils'\nimport useFirestore from './useFirestore'\n\n/**\n * @name createUseFirestoreConnect\n * @description React hook that automatically listens/unListens to provided\n * firebase paths.\n * **WARNING!!** This is an advanced feature, and should only be used when\n * needing to access a firebase instance created under a different store key.\n * Firebase state (state.firebase)\n * @return {Function} - React hook that accepts watch query\n * @example <caption>Basic</caption>\n * // props.firebase set on App component as firebase object with helpers\n * import { createUseFirestoreConnect } from 'react-redux-firebase'\n *\n * const firestoreConnect = createUseFirestoreConnect()\n *\n * export default useFirestoreConnect()\n */\nexport const createUseFirestoreConnect = () => dataOrFn => {\n  const firestore = useFirestore()\n\n  const inputAsFunc = createCallable(dataOrFn)\n\n  const data = inputAsFunc()\n\n  const payload = useMemo(\n    () => {\n      if (!data) {\n        return null\n      }\n      if (isArray(data)) {\n        throw new Error(\"Array isn't allowed inside useFirestoreConnect hook.\")\n      }\n      return [data]\n    },\n    [data]\n  )\n\n  useEffect(\n    () => {\n      if (data !== null) {\n        firestore.setListeners(payload)\n        return () => {\n          firestore.unsetListeners(payload)\n        }\n      }\n    },\n    [data]\n  )\n}\n\n/**\n * @name useFirestoreConnect\n * @description React hook that automatically listens/unListens\n * to provided Cloud Firestore paths. Make sure you have required/imported\n * Cloud Firestore, including it's reducer, before attempting to use.\n * **Note** Populate is not yet supported.\n * **Note2** Only single path is allowed per one hook\n * @param {Object|String} queriesConfig - An object or string for paths to sync\n * from firestore. Can also be a function that returns the object or string.\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { map } from 'lodash'\n * import { connect } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * const TodosList = ({ todosList }) => {\n *   useFirebaseConnect('todos') // sync todos collection from Firestore into redux\n *\n *   return <ul>{_.map(todosList, todo => <li>{todo}</li>)}</ul>\n * }\n *\n * // pass todos list from redux as props.todosList\n * export default compose(\n *   connect((state) => ({\n *     todosList: state.firestore.data.todos\n *   })\n * )(TodosList)\n * @example <caption>Object as query</caption>\n * import React, { useMemo } from 'react'\n * import { get } from 'lodash'\n * import { connect } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * const TodoItem = ({ todoId, todoData }) => {\n *   cosnt query = useMemo( // Make sure that everytime component rerender will not create a new query object which cause unnecessary set/unset listener\n *     () => ({\n *       collection: 'todos',\n *       doc: todoId\n *     }),\n *     [todoId] // useMemo's dependency\n *   )\n *   useFirebaseConnect(query) // sync todos collection from Firestore into redux\n *\n *   return <div>{JSON.stringify(todoData)}</div>\n * }\n *\n * // pass todo data from redux as props.todosList\n * export default compose(\n *   connect((state) => ({\n *     todoData: get(state, ['firestore', 'data', 'todos', todoId])\n *   })\n * )(TodoItem)\n */\nexport default createUseFirestoreConnect()\n"],"file":"useFirestoreConnect.js"}