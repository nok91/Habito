{"version":3,"sources":["../src/firestoreConnect.js"],"names":["createFirestoreConnect","dataOrFn","WrappedComponent","FirestoreConnectWrapped","firestoreIsEnabled","inputAsFunc","prevData","props","firestore","setListeners","unsetListeners","np","data","changes","getChanges","removed","added","result","d","p","Component","propTypes","dispatch","PropTypes","func","isRequired","firebase","object","HoistedComp","FirestoreConnect","displayName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { isEqual, some, filter } from 'lodash'\nimport hoistStatics from 'hoist-non-react-statics'\nimport { createCallable, wrapDisplayName } from './utils'\nimport ReduxFirestoreContext from './ReduxFirestoreContext'\nimport ReactReduxFirebaseContext from './ReactReduxFirebaseContext'\n\n/**\n * @name createFirestoreConnect\n * @description Function that creates a Higher Order Component that\n * automatically listens/unListens to provided firebase paths using\n * React's Lifecycle hooks.\n * **WARNING!!** This is an advanced feature, and should only be used when\n * needing to access a firebase instance created under a different store key.\n * @param {String} [storeKey='store'] - Name of redux store which contains\n * Firebase state (state.firebase)\n * @return {Function} - HOC that accepts a watchArray and wraps a component\n * @example <caption>Basic</caption>\n * // props.firebase set on App component as firebase object with helpers\n * import { createFirestoreConnect } from 'react-redux-firebase'\n * // create firebase connect that uses another redux store\n * const firestoreConnect = createFirestoreConnect('anotherStore')\n * // use the firebaseConnect to wrap a component\n * export default firestoreConnect()(SomeComponent)\n */\nexport const createFirestoreConnect = (storeKey = 'store') => (\n  dataOrFn = []\n) => WrappedComponent => {\n  class FirestoreConnectWrapped extends Component {\n    static wrappedComponent = WrappedComponent\n    static displayName = wrapDisplayName(\n      WrappedComponent,\n      'FirestoreConnectWrapped'\n    )\n\n    prevData = null\n\n    get firestoreIsEnabled() {\n      return !!this.props.firestore\n    }\n\n    componentDidMount() {\n      if (this.firestoreIsEnabled) {\n        // Listener configs as object (handling function being passed)\n        const inputAsFunc = createCallable(dataOrFn)\n        this.prevData = inputAsFunc(this.props, this.props)\n        // Attach listeners based on listener config\n        this.props.firestore.setListeners(this.prevData)\n      }\n    }\n\n    componentWillUnmount() {\n      if (this.firestoreIsEnabled && this.prevData) {\n        this.props.firestore.unsetListeners(this.prevData)\n      }\n    }\n\n    componentWillReceiveProps(np) {\n      const { firestore } = this.props\n      const inputAsFunc = createCallable(dataOrFn)\n      const data = inputAsFunc(np, this.props)\n\n      // Check for changes in the listener configs\n      if (this.firestoreIsEnabled && !isEqual(data, this.prevData)) {\n        const changes = this.getChanges(data, this.prevData)\n\n        this.prevData = data\n\n        // Remove listeners for inactive subscriptions\n        firestore.unsetListeners(changes.removed)\n\n        // Add listeners for new subscriptions\n        firestore.setListeners(changes.added)\n      }\n    }\n\n    getChanges(data = [], prevData = []) {\n      const result = {}\n      result.added = filter(data, d => !some(prevData, p => isEqual(d, p)))\n      result.removed = filter(prevData, p => !some(data, d => isEqual(p, d)))\n      return result\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n\n  FirestoreConnectWrapped.propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    firebase: PropTypes.object,\n    firestore: PropTypes.object\n  }\n\n  const HoistedComp = hoistStatics(FirestoreConnectWrapped, WrappedComponent)\n\n  const FirestoreConnect = props => (\n    <ReactReduxFirebaseContext.Consumer>\n      {firebase => (\n        <ReduxFirestoreContext.Consumer>\n          {firestore => (\n            <HoistedComp\n              firestore={firestore}\n              firebase={firebase}\n              dispatch={firebase.dispatch}\n              {...props}\n            />\n          )}\n        </ReduxFirestoreContext.Consumer>\n      )}\n    </ReactReduxFirebaseContext.Consumer>\n  )\n\n  FirestoreConnect.displayName = wrapDisplayName(\n    WrappedComponent,\n    'FirestoreConnect'\n  )\n\n  return FirestoreConnect\n}\n\n/**\n * @name firestoreConnect\n * @extends React.Component\n * @description Higher Order Component that automatically listens/unListens\n * to provided Cloud Firestore paths using React's Lifecycle hooks. Make sure you\n * have required/imported Cloud Firestore, including it's reducer, before\n * attempting to use. **Note** Populate is not yet supported.\n * @param {Array} queriesConfig - Array of objects or strings for paths to sync\n * from Firebase. Can also be a function that returns the array. The function\n * is passed the current props and the firebase object.\n * @return {Function} - that accepts a component to wrap and returns the wrapped component\n * @example <caption>Basic</caption>\n * // props.firebase set on App component as firebase object with helpers\n * import { firestoreConnect } from 'react-redux-firebase'\n * export default firestoreConnect()(SomeComponent)\n * @example <caption>Basic</caption>\n * import { connect } from 'react-redux'\n * import { firestoreConnect } from 'react-redux-firebase'\n *\n * // pass todos list from redux as props.todosList\n * export default compose(\n *   firestoreConnect(() => ['todos']), // sync todos collection from Firestore into redux\n *   connect((state) => ({\n *     todosList: state.firestore.data.todos\n *   })\n * )(SomeComponent)\n */\nexport default createFirestoreConnect()\n"],"file":"firestoreConnect.js"}