{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.pathToArr = pathToArr, exports.getSlashStrPath = getSlashStrPath, exports.getDotStrPath = getDotStrPath, exports.combineReducers = combineReducers, exports.preserveValuesFromState = preserveValuesFromState, exports.recursiveUnset = recursiveUnset;\n\nvar _unset2 = _interopRequireDefault(require(\"lodash/fp/unset\")),\n    _isArray2 = _interopRequireDefault(require(\"lodash/isArray\")),\n    _pick2 = _interopRequireDefault(require(\"lodash/pick\")),\n    _isBoolean2 = _interopRequireDefault(require(\"lodash/isBoolean\")),\n    _isFunction2 = _interopRequireDefault(require(\"lodash/isFunction\")),\n    _size2 = _interopRequireDefault(require(\"lodash/size\")),\n    _replace2 = _interopRequireDefault(require(\"lodash/replace\")),\n    _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null == arguments[i] ? {} : arguments[i],\n        ownKeys = Object.keys(source);\n    \"function\" == typeof Object.getOwnPropertySymbols && (ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n    }))), ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  return key in obj ? Object.defineProperty(obj, key, {\n    value: value,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : obj[key] = value, obj;\n}\n\nfunction pathToArr(path) {\n  return path ? path.split(/\\//).filter(function (p) {\n    return !!p;\n  }) : [];\n}\n\nfunction getSlashStrPath(path) {\n  return pathToArr(path).join(\"/\");\n}\n\nfunction getDotStrPath(path) {\n  return pathToArr(path).join(\".\");\n}\n\nfunction combineReducers(reducers) {\n  return function () {\n    var state = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {},\n        action = 1 < arguments.length ? arguments[1] : void 0;\n    return Object.keys(reducers).reduce(function (nextState, key) {\n      return nextState[key] = reducers[key](state[key], action), nextState;\n    }, {});\n  };\n}\n\nfunction preserveValuesFromState(state, preserveSetting, nextState) {\n  if ((0, _isFunction2.default)(preserveSetting)) return preserveSetting(state, nextState);\n  if ((0, _isBoolean2.default)(preserveSetting) && preserveSetting) return nextState ? _objectSpread({}, state, nextState) : state;\n  if ((0, _isArray2.default)(preserveSetting)) return (0, _pick2.default)(state, preserveSetting);\n  throw new Error(\"Invalid preserve parameter. It must be an Object or an Array\");\n}\n\nfunction recursiveUnset(path, obj) {\n  var isRecursiveCall = !!(2 < arguments.length && arguments[2] !== void 0) && arguments[2];\n  if (!path) return obj;\n  if (0 < (0, _size2.default)((0, _get2.default)(obj, path)) && isRecursiveCall) return obj;\n  var objectWithRemovedKey = (0, _unset2.default)(path, obj),\n      newPath = path.match(/\\./) ? (0, _replace2.default)(path, /\\.[^.]*$/, \"\") : \"\";\n  return recursiveUnset(newPath, objectWithRemovedKey, !0);\n}","map":null,"metadata":{},"sourceType":"script"}